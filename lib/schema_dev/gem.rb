# frozen_string_literal: true

require 'faraday'
require 'json'
require 'fileutils'
require 'pathname'
require 'active_support/core_ext/string'

require_relative 'runner'
require_relative 'templates'

module SchemaDev
  class Gem
    def self.build(name)
      new(name).build
    end

    attr_accessor :gem_name, :gem_module, :gem_root, :gem_parent_name, :gem_base_name, :gem_lib_path, :fullname, :email

    class TemplateEnv
      extend Forwardable

      def_delegators :@gem, :gem_name, :gem_module, :gem_root, :gem_parent_name, :gem_base_name, :gem_lib_path, :fullname, :email

      def initialize(gem)
        @gem = gem
      end

      def schema_plus_core_dependency
        _dependency(self.class.schema_plus_core_version)
      end

      def schema_dev_dependency
        _dependency(SchemaDev::VERSION)
      end

      def year
        Time.now.strftime('%Y')
      end

      def get_binding
        binding
      end

      def self.schema_plus_core_version
        @schema_plus_core_version ||=
          begin
            gems = JSON.parse Faraday.get('https://rubygems.org/api/v1/versions/schema_plus_core.json').body
            last = gems.reject { |e| e['prerelease'] }.max_by { |e| e['number'].split('.') }
            last['number']
          end
      end

      def _dependency(version)
        major, minor, patch = version.split('.')
        dep = %('~> #{major}.#{minor}')
        dep += %(, '>= #{version}') if patch != '0'
        dep
      end
    end

    def initialize(name)
      self.gem_name = name.underscore
      self.gem_root = Pathname.new(gem_name)
      if gem_name =~ /^(schema_plus)_(.*)/
        parent, base = [$1, $2]
        self.gem_module = [parent, base].map(&:camelize).join('::')
        self.gem_lib_path = [parent, base].join('/')
        self.gem_parent_name = parent
        self.gem_base_name = base
        @subdir = true
      else
        self.gem_module = gem_name.camelize
        self.gem_lib_path = gem_name
        self.gem_base_name = gem_name
        @subdir = false
      end
      get_fullname_and_email
    end

    def build
      ensure_not_in_git
      ensure_doesnt_exist
      copy_template
      self.gem_root = gem_root.realpath
      rename_files
      fixup_subdir if @subdir
      freshen
      git_init
      puts <<~TEXT

        Created #{gem_name}.  Your recommended next steps are:

               $ cd #{gem_name}
               $ bundle install
               $ schema_dev bundle install
               $ schema_dev rspec
      TEXT
    end

    def die(msg)
      abort "schema_dev: #{msg}"
    end

    def ensure_not_in_git
      if system('git rev-parse >& /dev/null')
        die 'Cannot create new gem inside existing git worktree; please cd elsewhere'
      end
    end

    def ensure_doesnt_exist
      if gem_root.exist?
        die "Cannot create new gem: '#{gem_root}' already exists"
      end
    end

    def get_fullname_and_email
      { 'fullname' => 'name', 'email' => 'email' }.each do |myattr, gitattr|
        if (send myattr + '=', `git config user.#{gitattr}`.strip).blank?
          die "Who are you?  Please run 'git config --global user.#{gitattr} <your-#{gitattr}>'"
        end
      end
    end

    def copy_template
      Templates.install_subtree src: 'gem', dst: gem_root, bound: template_binding
    end

    def rename_files
      (gem_root + 'gitignore').rename gem_root + '.gitignore'
      (gem_root + 'simplecov').rename gem_root + '.simplecov'
      Dir.glob(gem_root + '**/*GEM_NAME*').each do |path|
        FileUtils.mv path, path.gsub(/GEM_NAME/, gem_name)
      end
      Dir.glob(gem_root + '**/*GEM_BASE_NAME*').each do |path|
        FileUtils.mv path, path.gsub(/GEM_BASE_NAME/, gem_base_name)
      end
    end

    def fixup_subdir
      libdir = gem_root + 'lib'
      aside = libdir.to_s + 'x'
      subdir = libdir + gem_parent_name

      FileUtils.mv libdir, aside
      libdir.mkpath
      FileUtils.mv aside, subdir
      (gem_root + 'lib' + "#{gem_name}.rb").write <<~RUBY
        require_relative '#{gem_parent_name}/#{gem_base_name}'
      RUBY
    end

    def erb(string)
      ERB.new(string).result template_binding
    end

    def template_binding
      @template_binding ||= TemplateEnv.new(self).get_binding
    end

    def freshen
      Dir.chdir gem_root do
        Runner.new(Config.read).freshen(quiet: true)
      end
    end

    def git_init
      Dir.chdir gem_name do
        system 'git init'
        add_param = gem_root.find
                            .select(&:exist?)
                            .reject { |e| e.basename.to_s == 'Gemfile.local' }
                            .join(' ')
        system "git add #{add_param}"
        system "git commit -m 'Initial skeleton generated by `schema_dev gem #{gem_name}`'"
      end
    end
  end
end
