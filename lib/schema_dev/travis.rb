require 'pathname'
require 'yaml'

require_relative 'gemfile_selector'

module SchemaDev
  module Travis
    extend self

    TRAVIS_FILE = ".travis.yml"

    def build(config)
      env = []
      addons = {}
      if config.dbms.include?(:postgresql)
        env << 'POSTGRESQL_DB_USER=postgres'
        addons['postgresql'] = "9.3"
      end
      if config.dbms.include?(:mysql)
        env << 'MYSQL_DB_USER=travis'
      end
      env = env.join(' ')

      gemfiles = config.matrix.map{|entry| GemfileSelector.gemfile(entry.slice(:activerecord, :db)).to_s}.uniq

      exclude = config.matrix(excluded: :only).map { |entry| {}.tap {|ex|
        ex["rvm"] = entry[:ruby]
        ex["gemfile"] = GemfileSelector.gemfile(entry.slice(:activerecord, :db)).to_s
        ex["env"] = env unless env.empty?
      }}.reject{|ex| not gemfiles.include? ex["gemfile"]}

      {}.tap { |travis|
        travis["sudo"] = false
        travis["rvm"] = config.ruby.sort
        travis["gemfile"] = gemfiles.sort
        travis["env"] = env unless env.empty?
        travis["addons"] = addons unless addons.empty?
        if config.dbms.any?
          travis["before_script"] = 'bundle exec rake create_databases'
          travis["after_script"] = 'bundle exec rake drop_databases'
        end
        travis["script"] = "bundle exec rake travis"
        travis["notifications"] = { "email" => config.notify } if config.notify.any?
        travis["matrix"] = { "exclude" => exclude.sort_by{|ex| [ex["rvm"], ex["gemfile"]]} } if exclude.any?
      }
    end

    def update(config)
      filepath = Pathname.new(TRAVIS_FILE)
      newtravis = build(config)
      oldtravis = YAML.load(filepath.read) rescue nil
      if oldtravis != newtravis
        header = <<-ENDYAML
# This file was auto-generated by the schema_dev tool, based on the data in
#                 ./schema_dev.yml
# Please do not edit this file; any changes will be overwritten next time
# schema_dev gets run.
ENDYAML
        filepath.write header + newtravis.to_yaml
        return true
      end
    end
  end
end
